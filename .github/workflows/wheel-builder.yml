name: Release Wheel
permissions:
  contents: read
on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to build
  # Do not add any non-tag push events without updating pypi-publish.yml. If
  # you do, it'll upload wheels to PyPI.
  push:
    tags:
      - '*.*'
      - '*.*.*'
env:
  PYPI_NAME: tongsuopy
  TONGSUO_VERSION: 8.4.0
  INNER_WORKSPACE: /workspace
  INNER_BUILD_DIR: /build
  BUILD_REQUIREMENTS_PATH: .github/requirements/build-requirements.txt

jobs:
  sdist:
    runs-on: ubuntu-latest
    name: sdists
    steps:
      - uses: actions/checkout@v3.1.0
        with:
          # The tag to build or the tag received by the tag event
          ref: ${{ github.event.inputs.version || github.ref }}
          persist-credentials: false

      - run: python -m venv .venv
      - name: Install Python dependencies
        run: .venv/bin/pip install -U pip build
      - name: Make sdist
        run: .venv/bin/python -m build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: "tongsuopy-sdist"
          path: dist/tongsuopy*

  manylinux:
    needs: [sdist]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/tongsuo-project/${{ matrix.MANYLINUX.CONTAINER }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        PYTHON:
          - { VERSION: "cp311-cp311", ABI_VERSION: 'py37' }
          - { VERSION: "cp311-cp311", ABI_VERSION: 'py39' }
          - { VERSION: "pp39-pypy39_pp73" }
          - { VERSION: "pp310-pypy310_pp73" }
        MANYLINUX:
          - { NAME: "manylinux2014_x86_64", CONTAINER: "tongsuopy-manylinux2014:x86_64" }
          - { NAME: "manylinux_2_28_x86_64", CONTAINER: "tongsuopy-manylinux_2_28:x86_64"}
          - { NAME: "musllinux_1_2_x86_64", CONTAINER: "tongsuopy-musllinux_1_2:x86_64"}
        exclude:
          # There are no readily available PyPy distributions
          - PYTHON: { VERSION: "pp39-pypy39_pp73" }
            MANYLINUX: { NAME: "musllinux_1_2_x86_64", CONTAINER: "tongsuopy-musllinux_1_2:x86_64" }
          - PYTHON: { VERSION: "pp310-pypy310_pp73" }
            MANYLINUX: { NAME: "musllinux_1_2_x86_64", CONTAINER: "tongsuopy-musllinux_1_2:x86_64" }

          # We also don't build pypy wheels for anything except the latest manylinux
          - PYTHON: { VERSION: "pp39-pypy39_pp73" }
            MANYLINUX: { NAME: "manylinux2014_x86_64", CONTAINER: "tongsuopy-manylinux2014:x86_64" }
          - PYTHON: { VERSION: "pp310-pypy310_pp73" }
            MANYLINUX: { NAME: "manylinux2014_x86_64", CONTAINER: "tongsuopy-manylinux2014:x86_64" }
    name: "${{ matrix.PYTHON.VERSION }} for ${{ matrix.MANYLINUX.NAME }}"
    steps:
      - name: Get build-requirements.txt from repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          # The tag to build or the tag received by the tag event
          ref: ${{ github.event.inputs.version || github.ref }}
          persist-credentials: false
          sparse-checkout: |
            ${{ env.BUILD_REQUIREMENTS_PATH }}
          sparse-checkout-cone-mode: false

      - run: /opt/python/${{ matrix.PYTHON.VERSION }}/bin/python -m venv .venv
      - name: Install Python dependencies
        run: .venv/bin/pip install --require-hashes -r ${{ env.BUILD_REQUIREMENTS_PATH }}

      - uses: actions/download-artifact@v4
        with:
          name: tongsuopy-sdist
      - run: mkdir tmpwheelhouse
      - name: Build the wheel
        run: |
          if [ -n "${{ matrix.PYTHON.ABI_VERSION }}" ]; then
              PY_LIMITED_API="--config-settings=build-args=--features=pyo3/abi3-${{ matrix.PYTHON.ABI_VERSION }} --no-build-isolation"
          fi
          .venv/bin/python -m pip wheel -v --no-deps $PY_LIMITED_API tongsuopy*.tar.gz -w dist/ && mv dist/tongsuopy*.whl tmpwheelhouse
      - run: auditwheel repair --plat ${{ matrix.MANYLINUX.NAME }} tmpwheelhouse/tongsuopy*.whl -w wheelhouse/
      - run: unzip wheelhouse/*.whl -d execstack.check
      - run: |
          results=$(readelf -lW execstack.check/tongsuopy/backends/*.so)
          count=$(echo "$results" | grep -c 'GNU_STACK.*[R ][W ]E' || true)
          if [ "$count" -ne 0 ]; then
            exit 1
          else
            exit 0
          fi
      - run: .venv/bin/pip install tongsuopy --no-index -f wheelhouse/
      - run: |
          .venv/bin/python -c "from tongsuopy.backends.tongsuo.backend import backend;print('Loaded: ' + backend.openssl_version_text());print('Linked Against: ' + backend._ffi.string(backend._lib.OPENSSL_VERSION_TEXT).decode('ascii'))"
      - run: mkdir tongsuopy-wheelhouse
      - run: mv wheelhouse/tongsuopy*.whl tongsuopy-wheelhouse/
      - uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: "tongsuopy-${{ github.event.inputs.version }}-${{ matrix.MANYLINUX.NAME }}-${{ matrix.PYTHON.VERSION }}-${{ matrix.PYTHON.ABI_VERSION }}"
          path: tongsuopy-wheelhouse/

  manylinux-aarch64:
    needs: [ sdist ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        PYTHON:
          - { VERSION: "cp311-cp311", ABI_VERSION: 'py37' }
          - { VERSION: "cp311-cp311", ABI_VERSION: 'py39' }
          - { VERSION: "pp39-pypy39_pp73" }
          - { VERSION: "pp310-pypy310_pp73" }
        MANYLINUX:
          - { NAME: "manylinux2014_aarch64", CONTAINER: "tongsuopy-manylinux2014:aarch64" }
          - { NAME: "manylinux_2_28_aarch64", CONTAINER: "tongsuopy-manylinux_2_28:aarch64"}
          - { NAME: "musllinux_1_2_x86_64", CONTAINER: "tongsuopy-musllinux_1_2:aarch64"}
        exclude:
          # There are no readily available PyPy distributions
          - PYTHON: { VERSION: "pp39-pypy39_pp73" }
            MANYLINUX: { NAME: "musllinux_1_2_aarch64", CONTAINER: "tongsuopy-musllinux_1_2:aarch64" }
          - PYTHON: { VERSION: "pp310-pypy310_pp73" }
            MANYLINUX: { NAME: "musllinux_1_2_aarch64", CONTAINER: "tongsuopy-musllinux_1_2:aarch64" }

          # We also don't build pypy wheels for anything except the latest manylinux
          - PYTHON: { VERSION: "pp39-pypy39_pp73" }
            MANYLINUX: { NAME: "manylinux2014_aarch64", CONTAINER: "tongsuopy-manylinux2014:aarch64" }
          - PYTHON: { VERSION: "pp310-pypy310_pp73" }
            MANYLINUX: { NAME: "manylinux2014_aarch64", CONTAINER: "tongsuopy-manylinux2014:aarch64" }

    name: "${{ matrix.PYTHON.VERSION }} for ${{ matrix.MANYLINUX.NAME }}"
    steps:
      - name: Get build-requirements.txt from repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          # The tag to build or the tag received by the tag event
          ref: ${{ github.event.inputs.version || github.ref }}
          persist-credentials: false
          sparse-checkout: |
            ${{ env.BUILD_REQUIREMENTS_PATH }}
          sparse-checkout-cone-mode: false
      - uses: actions/download-artifact@v4
        with:
          name: tongsuopy-sdist
          path: ${{ github.workspace }}

      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        with:
          arch: none
          distro: none
          base_image: --platform=linux/arm64 ghcr.io/tongsuo-project/${{ matrix.MANYLINUX.CONTAINER }}

          # Not required, but speeds up builds
          githubToken: ${{ secrets.PAT }}

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${{ github.workspace }}:${{ env.INNER_WORKSPACE }}"
            --volume "${{ runner.temp }}:${{ env.INNER_BUILD_DIR }}"

          # Pass some environment variables to the container
          env: |
            INNER_WORKSPACE: "${{ env.INNER_WORKSPACE }}"
            INNER_BUILD_DIR: "${{ env.INNER_BUILD_DIR }}"
            PYTHON_VERSION: "${{ matrix.PYTHON.VERSION }}"
            PYTHON_ABI_VERSION: "${{ matrix.PYTHON.ABI_VERSION }}"
            MANYLINUX_NAME: "${{ matrix.MANYLINUX.NAME }}"

          # Produce a binary artifact and place it in the mounted volume
          run: |
            cd ${INNER_BUILD_DIR}
            /opt/python/${PYTHON_VERSION}/bin/python -m venv .venv
            .venv/bin/pip install --require-hashes -r ${{ env.INNER_WORKSPACE }}/${{ env.BUILD_REQUIREMENTS_PATH }}
            
            cd ${INNER_WORKSPACE}
            mkdir tmpwheelhouse
            PY_LIMITED_API=""
            if [ -n "${PYTHON_ABI_VERSION}" ]; then
              PY_LIMITED_API="--config-settings=build-args=--features=pyo3/abi3-${PYTHON_ABI_VERSION} --no-build-isolation"
            fi
            ${INNER_BUILD_DIR}/.venv/bin/python -m pip wheel -v --no-deps ${PY_LIMITED_API} tongsuopy*.tar.gz -w dist/ && mv dist/tongsuopy*.whl tmpwheelhouse
            
            cd ${INNER_WORKSPACE}
            auditwheel repair --plat ${MANYLINUX_NAME} tmpwheelhouse/tongsuopy*.whl -w wheelhouse/
            unzip wheelhouse/*.whl -d execstack.check
            results=$(readelf -lW execstack.check/tongsuopy/backends/*.so)
            count=$(echo "$results" | grep -c 'GNU_STACK.*[R ][W ]E' || true)
            echo "count -> ${count}"
            if [ "$count" -ne 0 ]; then
              exit 1
            fi
            
            cd ${INNER_WORKSPACE}
            ${INNER_BUILD_DIR}/.venv/bin/pip install tongsuopy --no-index -f wheelhouse/
            ${INNER_BUILD_DIR}/.venv/bin/python -c "from tongsuopy.backends.tongsuo.backend import backend;print('Loaded: ' + backend.openssl_version_text());print('Linked Against: ' + backend._ffi.string(backend._lib.OPENSSL_VERSION_TEXT).decode('ascii'))"
            mkdir tongsuopy-wheelhouse
            mv wheelhouse/tongsuopy*.whl tongsuopy-wheelhouse/

      - uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: "tongsuopy-${{ github.event.inputs.version }}-${{ matrix.MANYLINUX.NAME }}-${{ matrix.PYTHON.VERSION }}-${{ matrix.PYTHON.ABI_VERSION }}"
          path: tongsuopy-wheelhouse/

  macos:
    needs: [sdist]
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        PYTHON:
          - VERSION: '3.11'
            ABI_VERSION: 'py37'
            # Despite the name, this is built for the macOS 11 SDK on arm64 and 10.9+ on intel
            DOWNLOAD_URL: 'https://www.python.org/ftp/python/3.11.3/python-3.11.3-macos11.pkg'
            BIN_PATH: '/Library/Frameworks/Python.framework/Versions/3.11/bin/python3'
            DEPLOYMENT_TARGET: '10.12'
            # This archflags is default, but let's be explicit
            ARCHFLAGS: '-arch x86_64 -arch arm64'
            # See https://github.com/pypa/cibuildwheel/blob/c8876b5c54a6c6b08de5d4b1586906b56203bd9e/cibuildwheel/macos.py#L257-L269
            # This will change in the future as we change the base Python we
            # build against
            _PYTHON_HOST_PLATFORM: 'macosx-10.9-universal2'
          - VERSION: '3.11'
            ABI_VERSION: 'py39'
            DOWNLOAD_URL: 'https://www.python.org/ftp/python/3.11.3/python-3.11.3-macos11.pkg'
            BIN_PATH: '/Library/Frameworks/Python.framework/Versions/3.11/bin/python3'
            DEPLOYMENT_TARGET: '10.12'
            # This archflags is default, but let's be explicit
            ARCHFLAGS: '-arch x86_64 -arch arm64'
            _PYTHON_HOST_PLATFORM: 'macosx-10.9-universal2'
          - VERSION: 'pypy-3.9'
            BIN_PATH: 'pypy3'
            DEPLOYMENT_TARGET: '10.12'
            _PYTHON_HOST_PLATFORM: 'macosx-10.9-x86_64'
            ARCHFLAGS: '-arch x86_64'
          - VERSION: 'pypy-3.10'
            BIN_PATH: 'pypy3'
            DEPLOYMENT_TARGET: '10.12'
            _PYTHON_HOST_PLATFORM: 'macosx-10.9-x86_64'
            ARCHFLAGS: '-arch x86_64'
    name: "${{ matrix.PYTHON.VERSION }} ABI ${{ matrix.PYTHON.ABI_VERSION }} macOS ${{ matrix.PYTHON.ARCHFLAGS }}"
    steps:
      - name: Get build-requirements.txt from repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          # The tag to build or the tag received by the tag event
          ref: ${{ github.event.inputs.version || github.ref }}
          persist-credentials: false
          sparse-checkout: |
            ${{ env.BUILD_REQUIREMENTS_PATH }}
          sparse-checkout-cone-mode: false
      - uses: actions/download-artifact@v4
        with:
          name: tongsuopy-sdist

      - name: Setup python
        run: |
          curl "$PYTHON_DOWNLOAD_URL" -o python.pkg
          sudo installer -pkg python.pkg -target /
        env:
          PYTHON_DOWNLOAD_URL: ${{ matrix.PYTHON.DOWNLOAD_URL }}
        if: contains(matrix.PYTHON.VERSION, 'pypy') == false
      - name: Setup pypy
        uses: actions/setup-python@v4.3.0
        with:
          python-version: ${{ matrix.PYTHON.VERSION }}
        if: contains(matrix.PYTHON.VERSION, 'pypy')
      - name: Set TONGSUO_HOME
        shell: bash
        run: echo "TONGSUO_HOME=${GITHUB_WORKSPACE}/tongsuo${TONGSUO_VERSION}" >> $GITHUB_ENV
      - name: Build Tongsuo
        working-directory: ${{ runner.temp }}
        run: |
          wget "https://github.com/Tongsuo-Project/Tongsuo/archive/refs/tags/${TONGSUO_VERSION}.tar.gz"
          tar zxf "${TONGSUO_VERSION}.tar.gz"
          cd "Tongsuo-${TONGSUO_VERSION}"
          ./config no-shared enable-ntls enable-trace enable-ssl-trace --release --prefix=${TONGSUO_HOME}
          make -s -j4
          make install_sw
          cd -
      - run: ${{ matrix.PYTHON.BIN_PATH }} -m venv venv
      - name: Install Python dependencies
        run: venv/bin/pip install --require-hashes -r ${{ env.BUILD_REQUIREMENTS_PATH }}
      - run: mkdir wheelhouse
      - name: Build the wheel
        run: |
          if [ -n "${{ matrix.PYTHON.ABI_VERSION }}" ]; then
              PY_LIMITED_API="--config-settings=build-args=--features=pyo3/abi3-${{ matrix.PYTHON.ABI_VERSION }} --no-build-isolation"
          fi
          venv/bin/python -m pip wheel -v --no-deps $PY_LIMITED_API tongsuopy*.tar.gz -w dist/ && mv dist/tongsuopy*.whl wheelhouse
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.PYTHON.DEPLOYMENT_TARGET }}
          ARCHFLAGS: ${{ matrix.PYTHON.ARCHFLAGS }}
          _PYTHON_HOST_PLATFORM: ${{ matrix.PYTHON._PYTHON_HOST_PLATFORM }}
      - run: venv/bin/pip install -f wheelhouse --no-index tonguopy
      - name: Show the wheel's minimum macOS SDK and architectures
        run: |
          find venv/lib/*/site-packages/tongsuopy/backends -name '*.so' -exec vtool -show {} \;
      - run: |
          venv/bin/python -c "from tongsuopy.backends.tongsuo.backend import backend;print('Loaded: ' + backend.openssl_version_text());print('Linked Against: ' + backend._ffi.string(backend._lib.OPENSSL_VERSION_TEXT).decode('ascii'))"

      - run: mkdir tongsuopy-wheelhouse
      - run: mv wheelhouse/tongsuopy*.whl tongsuopy-wheelhouse/
      - run: |
          echo "TONGSUOPY_WHEEL_NAME=$(basename $(ls tongsuopy-wheelhouse/tongsuopy*.whl))" >> $GITHUB_ENV
      - uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: "${{ env.TONGSUOPY_WHEEL_NAME }}"
          path: tongsuopy-wheelhouse/

  windows:
    needs: [sdist]
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        WINDOWS:
          - {ARCH: 'x86', WINDOWS: 'win32', CONFIG: 'VC-WIN32'}
          - {ARCH: 'x64', WINDOWS: 'win64', CONFIG: 'VC-WIN64A'}
        PYTHON:
          - {VERSION: "3.11", "ABI_VERSION": "py37"}
          - {VERSION: "3.11", "ABI_VERSION": "py39"}
          - {VERSION: "pypy-3.9"}
          - {VERSION: "pypy-3.10"}
        exclude:
          # We need to exclude the below configuration because there is no 32-bit pypy3
          - WINDOWS: {ARCH: 'x86', WINDOWS: 'win32', CONFIG: 'VC-WIN32'}
            PYTHON: {VERSION: "pypy-3.9"}
          - WINDOWS: {ARCH: 'x86', WINDOWS: 'win32', CONFIG: 'VC-WIN32'}
            PYTHON: {VERSION: "pypy-3.10"}
    name: "${{ matrix.PYTHON.VERSION }} ${{ matrix.WINDOWS.WINDOWS }} ${{ matrix.PYTHON.ABI_VERSION }}"
    steps:
      - name: Get build-requirements.txt from repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          # The tag to build or the tag received by the tag event
          ref: ${{ github.event.inputs.version || github.ref }}
          persist-credentials: false
          sparse-checkout: |
            ${{ env.BUILD_REQUIREMENTS_PATH }}
          sparse-checkout-cone-mode: false
      - uses: actions/download-artifact@v4
        with:
          name: tongsuopy-sdist
      - name: Setup python
        uses: actions/setup-python@v4.3.0
        with:
          python-version: ${{ matrix.PYTHON.VERSION }}
          architecture: ${{ matrix.WINDOWS.ARCH }}
      - run: choco install -y winrar
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.WINDOWS.WINDOWS }}
      - uses: ilammy/setup-nasm@v1
        with:
          platform: ${{ matrix.WINDOWS.WINDOWS }}
      - uses: shogo82148/actions-setup-perl@v1
      - name: Set Env
        shell: bash
        run: |
          echo "TONGSUO_HOME=${GITHUB_WORKSPACE}\tongsuo${{ env.TONGSUO_VERSION }}" >> $GITHUB_ENV
      - name: Download Tongsuo source
        run: |
          wget "https://github.com/Tongsuo-Project/Tongsuo/archive/refs/tags/${{ env.TONGSUO_VERSION }}.tar.gz" -OutFile "${{ env.TONGSUO_VERSION }}.tar.gz"
        shell: powershell
      - run: '"C:\Program Files\WinRAR\WinRAR.exe" -INUL x ${{ env.TONGSUO_VERSION }}.tar.gz'
        shell: cmd
      - name: Build Tongsuo
        shell: cmd
        run: |
          pushd "Tongsuo-${{ env.TONGSUO_VERSION }}"
          mkdir _build
          pushd _build
          perl ..\Configure no-makedepend no-shared enable-ntls enable-trace enable-ssl-trace ${{ matrix.WINDOWS.CONFIG }} --prefix=%TONGSUO_HOME%
          nmake /S
          nmake install_sw
          popd
          popd
      - name: Install Python dependencies
        run: python -m pip install --require-hashes -r ${{ env.BUILD_REQUIREMENTS_PATH }}
      - run: mkdir wheelhouse
        shell: bash
      - run: |
          if [ -n "${{ matrix.PYTHON.ABI_VERSION }}" ]; then
              PY_LIMITED_API="--config-settings=build-args=--features=pyo3/abi3-${{ matrix.PYTHON.ABI_VERSION }} --no-build-isolation"
          fi

          python -m pip wheel -v --no-deps tongsuopy*.tar.gz $PY_LIMITED_API -w dist/ && mv dist/tongsuopy*.whl wheelhouse/
        shell: bash
      - run: pip install -f wheelhouse --no-index tongsuopy
      - name: Print the Tongsuo we built and linked against
        run: |
            python -c "from tongsuopy.backends.tongsuo.backend import backend;print('Loaded: ' + backend.openssl_version_text());print('Linked Against: ' + backend._ffi.string(backend._lib.OPENSSL_VERSION_TEXT).decode('ascii'))"
      - run: mkdir tongsuopy-wheelhouse
      - run: move wheelhouse\tongsuopy*.whl tongsuopy-wheelhouse\
      - uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: "tongsuopy-${{ github.event.inputs.version }}-${{ matrix.WINDOWS.WINDOWS }}-${{ matrix.PYTHON.VERSION }}-${{ matrix.PYTHON.ABI_VERSION }}"
          path: tongsuopy-wheelhouse\
